plugins {
    id 'java'
    id 'scala'
    id 'signing'
    id 'maven-publish'
    id "com.diffplug.spotless" version "6.11.0"
    // pinned version due to https://github.com/spotbugs/spotbugs/issues/2041
    id "com.github.spotbugs" version "5.0.13"
}

compileJava {
    if (JavaVersion.current().ordinal() > JavaVersion.VERSION_1_8.ordinal()) {
        options.compilerArgs.addAll(['--release', '8', '-Xlint'])
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // log
    implementation 'org.slf4j:slf4j-api:2.0.4'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.3.4'

    testImplementation 'org.scala-lang:scala3-library_3:3.2.1'
    testImplementation 'com.typesafe.scala-logging:scala-logging_3:3.9.5'
    // pinned due to netty-tcnative-boringssl-static being pinned
    testImplementation 'io.netty:netty-buffer:4.1.73.Final'
    testImplementation 'io.netty:netty-handler:4.1.73.Final'
    // pinned: https://github.com/netty/netty-tcnative/issues/716
    testRuntimeOnly 'io.netty:netty-tcnative-boringssl-static:2.0.47.Final'
    // required by ScalaTest
    testRuntimeOnly 'com.vladsch.flexmark:flexmark-all:0.64.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'

}

spotless {
    java {
        palantirJavaFormat()
    }
    scala {
        scalafmt('3.5.9').configFile('.scalafmt.conf')
    }
}

// There are some compatibility issues with spotless older Java versions,
// but we don't need to cross-do style checks anyway
if (JavaVersion.current().ordinal() < JavaVersion.VERSION_17.ordinal()) {
    tasks.findByName("spotlessScala").enabled(false)
    tasks.findByName("spotlessJava").enabled(false)
}

spotbugs {
    ignoreFailures = false
    showProgress = true
    reportsDir = file("$buildDir/spotbugs")
}

spotbugsMain {
    excludeFilter = file('spotbugs-exclude.xml')
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/spotbugs.html")
        }
    }
}

spotbugsTest {
    excludeFilter = file('spotbugs-exclude-tests.xml')
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/spotbugsTest.html")
        }
    }
}

compileScala {
    options.compilerArgs = [
            "-language:implicitConversions",
            "-Xlint",
            "-deprecation",
            "-Xfatal-warnings"
    ]
}

test {
    useJUnitPlatform()
    // override security properties enabling all options
    systemProperty "java.security.properties", "java.security.override"
}

javadoc {
    exclude "tlschannel/impl"
    exclude "tlschannel/util"
}

java {
    withSourcesJar()
    withJavadocJar()
}

// see tlschannel.AllocationTest for comment about this
task allocationTest(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'tlschannel.AllocationTest'
    jvmArgs = ['-XX:+UnlockExperimentalVMOptions', '-XX:+UseEpsilonGC']
}

if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_11.ordinal()) {
    check.dependsOn allocationTest
}

publishing {
    publications {
        tlschannel(MavenPublication) {
            groupId = 'com.github.marianobarrios'
            artifactId = 'tls-channel'
            version = '0.7.0-SNAPSHOT'
            from components.java
            pom {
                name = 'TLS Channel'
                description = 'A Java library that implements a ByteChannel interface over SSLEngine, ' +
                        'enabling easy-to-use (socket-like) TLS for Java applications. '
                url = 'https://github.com/marianobarrios/tls-channel'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        name = 'Mariano Barrios'
                        email = 'marbar@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:marianobarrios/tlschannel.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'scm:git@github.com:marianobarrios/tlschannel.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('sonatypeUsername')
                password = project.findProperty('sonatypePassword')
            }
        }
    }
}

signing {
    sign publishing.publications.tlschannel
}
