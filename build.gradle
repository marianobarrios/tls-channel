plugins {
    id 'java'
    id 'scala'
    id 'signing'
    id 'maven-publish'
    id "com.diffplug.spotless" version "5.14.2"
    id "com.github.spotbugs" version "4.6.2"
}

compileJava {
    if (JavaVersion.current().ordinal() > JavaVersion.VERSION_1_8.ordinal()) {
        options.compilerArgs.addAll(['--release', '8', '-Xlint'])
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.32'
    testImplementation 'org.scala-lang:scala-library:2.13.6'
    testImplementation 'org.scalatest:scalatest_2.13:3.2.9'
    testImplementation 'ch.qos.logback:logback-classic:1.2.5'
    testImplementation 'com.typesafe.scala-logging:scala-logging_2.13:3.9.4'
    testImplementation 'io.netty:netty-buffer:4.1.66.Final'
    testImplementation 'io.netty:netty-handler:4.1.66.Final'
    testRuntimeOnly 'io.netty:netty-tcnative-boringssl-static:2.0.40.Final'
    // https://github.com/scalatest/scalatest/issues/1736
    testRuntimeOnly "com.vladsch.flexmark:flexmark-all:0.36.8"
}

// Google Java Format requires problematic configuration in Java 16, which is hard to get to work with Java 8
// (pre modules) at the same time
if (JavaVersion.current().ordinal() < JavaVersion.VERSION_16.ordinal()) {
    spotless {
        java {
            googleJavaFormat()
        }
        scala {
            scalafmt().configFile('.scalafmt.conf')
        }
    }
}

spotbugs {
    ignoreFailures = false
    showProgress = true
    reportsDir = file("$buildDir/spotbugs")
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
        }
    }
}

spotbugsTest {
    excludeFilter = file('spotbugs-exclude-tests.xml')
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugsTest.html")
        }
    }
}

compileScala {
    options.compilerArgs = [
            "-language:implicitConversions",
            "-Xlint",
            "-deprecation",
            "-Xfatal-warnings"
    ]
}

task scalaTest(dependsOn: ['testClasses'], type: JavaExec) {
    // override security properties enabling all options
    systemProperty "java.security.properties", "java.security.override"
    mainClass = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o', '-h', file("$buildDir/reports/test")]
    classpath = sourceSets.test.runtimeClasspath
}

test.enabled = false
check.dependsOn scalaTest


javadoc {
    exclude "tlschannel/impl"
    exclude "tlschannel/util"
}

java {
    withSourcesJar()
    withJavadocJar()
}

// see tlschannel.AllocationTest for comment about this
task allocationTest(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'tlschannel.AllocationTest'
    jvmArgs = ['-XX:+UnlockExperimentalVMOptions', '-XX:+UseEpsilonGC']
}

if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_11.ordinal()) {
    check.dependsOn allocationTest
}

publishing {
    publications {
        tlschannel(MavenPublication) {
            groupId = 'com.github.marianobarrios'
            artifactId = 'tls-channel'
            version = '0.5.0-SNAPSHOT'
            from components.java
            pom {
                name = 'TLS Channel'
                description = 'A Java library that implements a ByteChannel interface over SSLEngine, ' +
                        'enabling easy-to-use (socket-like) TLS for Java applications. '
                url = 'https://github.com/marianobarrios/tls-channel'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        name = 'Mariano Barrios'
                        email = 'marbar@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:marianobarrios/tlschannel.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'scm:git@github.com:marianobarrios/tlschannel.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('sonatypeUsername')
                password = project.findProperty('sonatypePassword')
            }
        }
    }
}

signing {
    sign publishing.publications.tlschannel
}
